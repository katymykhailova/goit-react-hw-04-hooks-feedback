{"version":3,"sources":["components/Section/Section.styles.jsx","components/Section/Section.jsx","components/Feedback/FeedbackOptions.styles.jsx","components/Feedback/FeedbackOptions.jsx","components/Statistics/Statistics.styles.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.styles.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["SectionContainer","Section","children","title","FeedbackButton","FeedbackOptions","options","onLeaveFeedback","map","option","name","onClick","Paragraph","Statistics","total","positive","feedbackValues","Notification","message","App","useState","good","setGood","neutral","setNeutral","bad","setBad","feedbackOptions","positiveFeedback","positiveFeedbackPercentage","Math","round","countPositiveFeedbackPercentage","feedback","state","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAEO,IAAMA,EAAgB,yP,OCedC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC3B,OACE,eAACH,EAAD,WACE,6BAAKG,IACJD,MCLA,IAAME,EAAc,4TCwBZC,MAvBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,cAACL,EAAD,CAEEM,KAAMD,EACNE,QAAS,WACPJ,EAAgBE,IAJpB,SAOGA,GANIA,SCNR,IAAMG,EAAS,0FCsBPC,MArBf,YAAmE,IAA7CP,EAA4C,EAA5CA,QAASQ,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,eAC9C,OACE,gCACGV,EAAQE,KAAI,SAAAC,GAAM,OACjB,eAACG,EAAD,WACGH,EADH,KACaO,EAAeP,KADZA,MAIlB,eAACG,EAAD,qBAAmBE,KACnB,eAACF,EAAD,iCAA+BG,EAA/B,WCVC,IAAMH,EAAS,yFCaPK,MAZf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OACE,8BACE,cAAC,EAAD,UAAYA,OCCH,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsBJ,mBAAS,GAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KA2BMC,EAAkB,CAAC,OAAQ,UAAW,OACtCX,EAAiB,CAAEK,OAAME,UAASE,OAClCX,EA1BGO,EAAOE,EAAUE,EA2BpBG,EAxBkC,WACtC,IAAMC,EAA8BR,EAAOP,EAAS,IACpD,OAAOgB,KAAKC,MAAMF,GAsBKG,GAEzB,OACE,qCACE,cAAC,EAAD,CAAS7B,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAASqB,EACTpB,gBA1BgB,SAAA0B,GACtB,OAAQA,GACN,IAAK,OACH,OAAOX,GAAQ,SAAAY,GAAK,OAAIA,EAAQ,KAElC,IAAK,UACH,OAAOV,GAAW,SAAAU,GAAK,OAAIA,EAAQ,KAErC,IAAK,MACH,OAAOR,GAAO,SAAAQ,GAAK,OAAIA,EAAQ,KAEjC,QACE,aAiBF,cAAC,EAAD,CAAS/B,MAAM,aAAf,SACa,IAAVW,EACC,cAAC,EAAD,CACER,QAASqB,EACTb,MAAOA,EACPC,SAAUa,EACVZ,eAAgBA,IAGlB,cAAC,EAAD,CAAcE,QAAQ,2BCtDhCiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAClB,EAAD,MAEFmB,SAASC,eAAe,W","file":"static/js/main.c31b8d5e.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\r\n\r\nexport const SectionContainer = styled.section`\r\n  max-width: 1170px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  border: 1px #e4e6ee solid;\r\n  border-radius: 0px 0px 4px 4px;\r\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 25%);\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { SectionContainer } from './Section.styles';\r\n\r\nfunction Section({ children, title }) {\r\n  return (\r\n    <SectionContainer>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </SectionContainer>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const FeedbackButton = styled.button`\r\n  background: transparent;\r\n  border-radius: 3px;\r\n  border: 2px solid palevioletred;\r\n  color: palevioletred;\r\n  margin-top: 0.5em;\r\n  margin-right: 1em;\r\n  padding: 0.25em 1em;\r\n  font-size: 1em;\r\n  text-transform: capitalize;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: palevioletred;\r\n    color: white;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { FeedbackButton } from './FeedbackOptions.styles';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <FeedbackButton\r\n          key={option}\r\n          name={option}\r\n          onClick={() => {\r\n            onLeaveFeedback(option);\r\n          }}\r\n        >\r\n          {option}\r\n        </FeedbackButton>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const Paragraph = styled.p`\r\n  text-transform: capitalize;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Paragraph } from './Statistics.styles';\r\n\r\nfunction Statistics({ options, total, positive, feedbackValues }) {\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <Paragraph key={option}>\r\n          {option}: {feedbackValues[option]}\r\n        </Paragraph>\r\n      ))}\r\n      <Paragraph>Total: {total}</Paragraph>\r\n      <Paragraph>Positive feedback: {positive}%</Paragraph>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positive: PropTypes.number.isRequired,\r\n  feedbackValues: PropTypes.objectOf(PropTypes.number).isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const Paragraph = styled.p`\r\n  text-transform: capitalize;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Paragraph } from './Notification.styles';\r\n\r\nfunction Notification({ message }) {\r\n  return (\r\n    <div>\r\n      <Paragraph>{message}</Paragraph>\r\n    </div>\r\n  );\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState } from 'react';\n\nimport Section from './components/Section';\nimport FeedbackOptions from './components/Feedback';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const positiveFeedbackPercentage = (good / total) * 100;\n    return Math.round(positiveFeedbackPercentage);\n  };\n\n  const onLeaveFeedback = feedback => {\n    switch (feedback) {\n      case 'good':\n        return setGood(state => state + 1);\n\n      case 'neutral':\n        return setNeutral(state => state + 1);\n\n      case 'bad':\n        return setBad(state => state + 1);\n\n      default:\n        return;\n    }\n  };\n\n  const feedbackOptions = ['good', 'neutral', 'bad'];\n  const feedbackValues = { good, neutral, bad };\n  const total = countTotalFeedback();\n  const positiveFeedback = countPositiveFeedbackPercentage();\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={feedbackOptions}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {total !== 0 ? (\n          <Statistics\n            options={feedbackOptions}\n            total={total}\n            positive={positiveFeedback}\n            feedbackValues={feedbackValues}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}