{"version":3,"sources":["components/Section/Section.styles.jsx","components/Section/Section.jsx","components/Feedback/FeedbackOptions.styles.jsx","components/Feedback/FeedbackOptions.jsx","components/Statistics/Statistics.styles.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.styles.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["SectionContainer","Section","children","title","FeedbackButton","FeedbackOptions","options","onLeaveFeedback","map","option","name","onClick","Paragraph","Statistics","total","positive","feedbackValues","Notification","message","App","state","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","positiveFeedbackPercentage","Math","round","feedback","setState","prevState","feedbackOptions","Object","keys","this","positiveFeedback","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAEO,IAAMA,EAAgB,yP,OCedC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC3B,OACE,eAACH,EAAD,WACE,6BAAKG,IACJD,MCLA,IAAME,EAAc,4TCwBZC,MAvBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,cAACL,EAAD,CAEEM,KAAMD,EACNE,QAAS,WACPJ,EAAgBE,IAJpB,SAOGA,GANIA,SCNR,IAAMG,EAAS,0FCsBPC,MArBf,YAAmE,IAA7CP,EAA4C,EAA5CA,QAASQ,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,eAC9C,OACE,gCACGV,EAAQE,KAAI,SAAAC,GAAM,OACjB,eAACG,EAAD,WACGH,EADH,KACaO,EAAeP,KADZA,MAIlB,eAACG,EAAD,qBAAmBE,KACnB,eAACF,EAAD,iCAA+BG,EAA/B,WCVC,IAAMH,EAAS,yFCaPK,MAZf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OACE,8BACE,cAAC,EAAD,UAAYA,OCyDHC,E,4MAvDbC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,mBAAqB,WACnB,MAA+B,EAAKJ,MACpC,OADA,EAAQC,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBE,gCAAkC,WAChC,IAEMC,EAFW,EAAKN,MAAdC,KACM,EAAKG,qBACiC,IACpD,OAAOG,KAAKC,MAAMF,I,EAGpBnB,gBAAkB,SAAAsB,GAChB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAWE,EAAUF,GAAY,O,4CAItC,WACE,IAAMG,EAAkBC,OAAOC,KAAKC,KAAKf,OACnCJ,EAAiBmB,KAAKf,MACtBN,EAAQqB,KAAKX,qBACbY,EAAmBD,KAAKV,kCAE9B,OACE,qCACE,cAAC,EAAD,CAAStB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS0B,EACTzB,gBAAiB4B,KAAK5B,oBAG1B,cAAC,EAAD,CAASJ,MAAM,aAAf,SACa,IAAVW,EACC,cAAC,EAAD,CACER,QAAS0B,EACTlB,MAAOA,EACPC,SAAUqB,EACVpB,eAAgBA,IAGlB,cAAC,EAAD,CAAcE,QAAQ,+B,GAhDhBmB,aCFlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.51c5f25a.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\r\n\r\nexport const SectionContainer = styled.section`\r\n  max-width: 1170px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  border: 1px #e4e6ee solid;\r\n  border-radius: 0px 0px 4px 4px;\r\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 25%);\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { SectionContainer } from './Section.styles';\r\n\r\nfunction Section({ children, title }) {\r\n  return (\r\n    <SectionContainer>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </SectionContainer>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const FeedbackButton = styled.button`\r\n  background: transparent;\r\n  border-radius: 3px;\r\n  border: 2px solid palevioletred;\r\n  color: palevioletred;\r\n  margin-top: 0.5em;\r\n  margin-right: 1em;\r\n  padding: 0.25em 1em;\r\n  font-size: 1em;\r\n  text-transform: capitalize;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: palevioletred;\r\n    color: white;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { FeedbackButton } from './FeedbackOptions.styles';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <FeedbackButton\r\n          key={option}\r\n          name={option}\r\n          onClick={() => {\r\n            onLeaveFeedback(option);\r\n          }}\r\n        >\r\n          {option}\r\n        </FeedbackButton>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const Paragraph = styled.p`\r\n  text-transform: capitalize;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Paragraph } from './Statistics.styles';\r\n\r\nfunction Statistics({ options, total, positive, feedbackValues }) {\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <Paragraph key={option}>\r\n          {option}: {feedbackValues[option]}\r\n        </Paragraph>\r\n      ))}\r\n      <Paragraph>Total: {total}</Paragraph>\r\n      <Paragraph>Positive feedback: {positive}%</Paragraph>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positive: PropTypes.number.isRequired,\r\n  feedbackValues: PropTypes.objectOf(PropTypes.number).isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const Paragraph = styled.p`\r\n  text-transform: capitalize;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Paragraph } from './Notification.styles';\r\n\r\nfunction Notification({ message }) {\r\n  return (\r\n    <div>\r\n      <Paragraph>{message}</Paragraph>\r\n    </div>\r\n  );\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\n\nimport Section from './components/Section';\nimport FeedbackOptions from './components/Feedback';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    const positiveFeedbackPercentage = (good / total) * 100;\n    return Math.round(positiveFeedbackPercentage);\n  };\n\n  onLeaveFeedback = feedback => {\n    this.setState(prevState => ({\n      [feedback]: prevState[feedback] + 1,\n    }));\n  };\n\n  render() {\n    const feedbackOptions = Object.keys(this.state);\n    const feedbackValues = this.state;\n    const total = this.countTotalFeedback();\n    const positiveFeedback = this.countPositiveFeedbackPercentage();\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={feedbackOptions}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {total !== 0 ? (\n            <Statistics\n              options={feedbackOptions}\n              total={total}\n              positive={positiveFeedback}\n              feedbackValues={feedbackValues}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}